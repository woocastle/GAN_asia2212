# -*- coding: utf-8 -*-
"""exam06_CNN_GAN_number.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oeNT0uRerZBKdf-rRIpnJenJSs8ruEvr
"""

import matplotlib.pyplot as plt
import numpy as np
from keras.models import *
from keras.layers import *
from keras.datasets import mnist
import os

OUT_DIR = './CNN_out'
img_shape = (28, 28, 1)
epochs = 100000
batch_size = 128
noise = 100
sample_interval = 100

(x_train, y_train), (_, _) = mnist.load_data()
print(x_train.shape)
MY_NUMBER = 1
x_train = x_train[y_train == MY_NUMBER] # 손글씨 1만 인덱싱한다.
x_train = x_train / 127.5 - 1
x_train = np.expand_dims(x_train, axis=3)
print(x_train.shape)

from google.colab import drive
drive.mount('/content/drive')

generator = Sequential()
generator.add(Dense(256*7*7, input_dim=noise))
generator.add(Reshape((7, 7, 256)))
generator.add(Conv2DTranspose(128, kernel_size=3, strides=2, padding='same'))
generator.add(BatchNormalization())
generator.add(LeakyReLU(alpha=0.01))
generator.add(Conv2DTranspose(64, kernel_size=3, strides=1, padding='same'))
generator.add(BatchNormalization())
generator.add(LeakyReLU(alpha=0.01))
generator.add(Conv2DTranspose(1, kernel_size=3, strides=2, padding='same'))
generator.add(Activation('tanh'))
generator.summary()

discriminator = Sequential()
discriminator.add(Conv2D(32, kernel_size=3, strides=2, padding='same', input_shape=img_shape))
discriminator.add(LeakyReLU(alpha=0.01))
discriminator.add(Conv2D(64, kernel_size=3, strides=2, padding='same'))
discriminator.add(LeakyReLU(alpha=0.01))
discriminator.add(Conv2D(128, kernel_size=3, strides=2, padding='same'))
discriminator.add(LeakyReLU(alpha=0.01))
discriminator.add(Flatten())
discriminator.add(Dense(1, activation='sigmoid'))
discriminator.summary()

discriminator.compile(loss='binary_crossentropy', optimizer='adam',
                      metrics=['accuracy'])
discriminator.trainable = False

gan_model =Sequential()
gan_model.add(generator)
gan_model.add(discriminator)
gan_model.summary()
gan_model.compile(loss='binary_crossentropy', optimizer='adam')

real = np.ones((batch_size, 1))
fake = np.zeros((batch_size, 1))

for epoch in range(epochs):
    idx = np.random.randint(0, x_train.shape[0], batch_size)
    real_imgs = x_train[idx]

    z = np.random.normal(0, 1, (batch_size, noise))
    fake_imgs = generator.predict(z)

    d_hist_real = discriminator.train_on_batch(real_imgs, real)
    d_hist_fake = discriminator.train_on_batch(fake_imgs, fake)

    d_loss, d_acc = np.add(d_hist_fake, d_hist_real) * 0.5



    if epoch % 2 == 0:
        z = np.random.normal(0, 1, (batch_size, noise))
        gan_hist = gan_model.train_on_batch(z, real)

    if epoch % sample_interval == 0:
        print('%d, [D loss: %f, acc.: %.2f%%], [G loss: %f]'%(
                    epoch, d_loss, d_loss, gan_hist))
        row = col = 4
        z = np.random.normal(0, 1, (row * col, noise))
        fake_imgs = generator.predict(z)
        fake_imgs = 0.5 * fake_imgs + 0.5
        _, axs = plt.subplots(row, col, figsize=(5, 5), sharey=True, sharex=True)
        cont = 0
        for i in range(row):
            for j in range(col):
                axs[i, j].imshow(fake_imgs[cont, :, :, 0], cmap='gray')
                axs[i, j].axis('off')
                cont += 1
        path = os.path.join(OUT_DIR, 'img-{}'.format(epoch+1))
        plt.show()
        plt.close() # 경로 저장하는 법 우클릭 경로복사
        generator.save('/content/drive/MyDrive/GAN_models/generator_mnist_{}.h5'.format(MY_NUMBER))

number_GAN_models = []
for i in range(10):
  number_GAN_models.append(load_model('/content/drive/MyDrive/GAN_models/generator_mnist_{}.h5'.format(i)))

four_digit_number = '4621'

imgs = []
for i in four_digit_number:
  i = int(i)
  z = np.random.normal(0, 1, (1, 100))
  fake_img = number_GAN_models[i].predict(z)
  fake_img = 0.5 * fake_img + 0.5
  print(fake_img.shape)
  imgs.append(fake_img.reshape(28, 28))

_, axs = plt.subplots(1, 4, figsize=(10, 40), sharex=True, sharey=True)
for i in range(4):
  axs[i].imshow(imgs[i], cmap='gray')
  axs[i].axis('off')
plt.show()

img = imgs[0]
for i in range(1, 4):
  img = np.append(img, imgs[i], axis=1)
plt.imshow(img)
plt.axis('off')
plt.show()

input_value = input()
imgs = []
for i in input_value:
  i = int(i)
  z = np.random.normal(0, 1, (1, 100))
  fake_img = number_GAN_models[i].predict(z)
  fake_img = 0.5 * fake_img + 0.5
  print(fake_img.shape)
  imgs.append(fake_img.reshape(28, 28))
  
img = imgs[0]
for i in range(1, len(input_value)):
  img = np.append(img, imgs[i], axis=1)
plt.summer()
plt.imshow(img)
plt.axis('off')
plt.show()

